"use strict";let hasInitialised=!1,runtime=null;function IsAbsoluteURL(t){return/^(?:[a-z\-]+:)?\/\//.test(t)||"data:"===t.substr(0,5)||"blob:"===t.substr(0,5)}function IsRelativeURL(t){return!IsAbsoluteURL(t)}async function LoadScripts(t){if(1===t.length){const e=t[0];await import((IsRelativeURL(e)?"./":"")+e)}else{const e=t.map((t=>`import "${IsRelativeURL(t)?"./":""}${t}";`)).join("\n"),r=URL.createObjectURL(new Blob([e],{type:"application/javascript"}));await import(r)}}async function InitRuntime(t){if(hasInitialised)throw new Error("already initialised");hasInitialised=!0;const e=t.messagePort,r=t.baseUrl,i=t.exportType;self.devicePixelRatio=t.devicePixelRatio;const n=t.workerDependencyScripts.map((t=>{let e=t;return e=t instanceof Blob?URL.createObjectURL(t):new URL(e,r).toString(),e})),s=[];self.runOnStartup=function(t){if("function"!=typeof t)throw new Error("runOnStartup called without a function");s.push(t)};const a=t.engineScripts.map((t=>new URL(t,r).toString()));try{await LoadScripts([...n,...a])}catch(t){return}const o=t.projectScriptsStatus;self.C3_ProjectScriptsStatus=o;const c=t.mainProjectScript,p=t.projectScripts;for(let[t,r]of p)if(r||(r=t),t===c)try{await LoadScripts([r]),"preview"!==i||o[t]||ReportProjectMainScriptError(t,"main script did not run to completion",e)}catch(r){ReportProjectMainScriptError(t,r,e)}else("scriptsInEvents.js"===t||t.endsWith("/scriptsInEvents.js"))&&await LoadScripts([r]);if(t.runOnStartupFunctions=s,"preview"!==i||"object"==typeof self.C3.ScriptsInEvents)e.postMessage({type:"creating-runtime"}),runtime=self.C3_CreateRuntime(t),await self.C3_InitRuntime(runtime,t);else{const t="Failed to load JavaScript code used in events. Check all your JavaScript code has valid syntax.";e.postMessage({type:"alert-error",message:t})}}function ReportProjectMainScriptError(t,e,r){const i=`Failed to load project main script (${t}). Check all your JavaScript code has valid syntax. Press F12 and check the console for error details.`;r.postMessage({type:"alert-error",message:i})}self.addEventListener("message",(t=>{const e=t.data,r=e.type;if("init-runtime"!==r)throw new Error(`unknown message '${r}'`);InitRuntime(e)})),self.c3_import=t=>import(t);