import{Traffic}from"../Traffic.js";import{Pool}from"./Pool.js";import{Intersection}from"./Intersection.js";import{Road}from"./Road.js";import{Car}from"./Car.js";import{Rect}from"../geom/Rect.js";import{Point}from"../geom/Point.js";export class TrafficWorld{constructor(){this.toRemove=[],this.onTick=Traffic.bind(this.onTick,this),this.minDistance=Traffic.settings.gridSize/5,this.set()}get instantSpeed(){let t=Traffic.map(this.cars.all(),(function(t){return t.speed}));return 0===t.length?0:Traffic.reduce(t,(function(t,r){return t+r}))/t.length}set(t={}){return null==t&&(t={}),this.intersections=new Pool(Intersection,t.intersections),this.roads=new Pool(Road,t.roads),this.cars=new Pool(Car,t.cars),this.carsNumber=0}save(){let t;return t=Traffic.extend({},this),delete t.cars,window.localStorage.world=JSON.stringify(t)}load(){let t,r,e,i,s,a,o;if(t=window.localStorage.world,t=t&&JSON.parse(t),null!=t){for(r in this.clear(),this.carsNumber=t.carsNumber||0,s=t.intersections,s)e=s[r],this.addIntersection((new Intersection).copy(e));for(r in a=t.roads,o=[],a)i=a[r],i=(new Road).copy(i),i.source=this.getIntersection(i.source),i.target=this.getIntersection(i.target),o.push(this.addRoad(i));return o}}generateMap(t=2,r=2,e=5,i=.8,s=100,a={x:1,y:1}){let o,n,d,l,c,h,f,u,m,p,g,R,T=2*t,w=2*r;for(this.clear(),d=i*(T-0+1)*(w-0+1)|0,l={},o=Traffic.settings.gridSize,h=e*o,this.carsNumber=s;d>0;)f=Traffic.rand(0,T),u=Traffic.rand(0,w),null==l[[f,u]]&&(n=this.addPoint(a.x+h*f,a.y+h*u),this.addIntersection(l[[f,u]]=n),d-=1);for(f=m=0;0<=T?m<=T:m>=T;f=0<=T?++m:--m)for(c=null,u=p=0;0<=w?p<=w:p>=w;u=0<=w?++p:--p)n=l[[f,u]],null!=n&&(Traffic.random()<.9&&(null!=c&&this.addRoad(new Road(n,c)),null!=c&&this.addRoad(new Road(c,n))),c=n);for(u=g=0;0<=w?g<=w:g>=w;u=0<=w?++g:--g)for(c=null,f=R=0;0<=T?R<=T:R>=T;f=0<=T?++R:--R)n=l[[f,u]],null!=n&&(Traffic.random()<.9&&(null!=c&&this.addRoad(new Road(n,c)),null!=c&&this.addRoad(new Road(c,n))),c=n);return null}clear(){return this.set({})}onTick(t){let r,e,i,s;if(t>1)throw Error("delta > 1");for(e in this.refreshCars(),s=this.intersections.all(),s)i=s[e],i.controlSignals.onTick(t);for(e in s=this.cars.all(),s)r=s[e],r.move(t),r.alive||this.removeCar(r)}roadFromTo(t,r){let e=this.addPoint(t.x,t.y),i=this.addPoint(r.x,r.y);this.addRoad(new Road(e,i)),e.update(),i.update()}addPoint(t,r){let e=Traffic.TMP,i=[t,r].join(",");if(e.has(i))return e.get(i);let s=Traffic.settings.gridSize,a=new Rect(t,r,s,s),o=new Intersection(a);return e.set(i,o),this.intersections.put(o),o}removePoint(t){let r=Traffic.TMP;return r.has(t.key)?r.delete(t.key):this.intersections.pop(t)}refreshCars(){if(this.cars.length<this.carsNumber&&this.addRandomCar(),this.cars.length>this.carsNumber)return this.removeRandomCar()}addRoad(t){return this.roads.put(t),t.source.roads.push(t),t.target.inRoads.push(t),t.update()}getRoad(t){return this.roads.get(t)}addCar(t){return this.cars.put(t)}getCar(t){return this.cars.get(t)}removeCar(t){this.toRemove.push(t.id),this.cars.pop(t)}clearTmpRemove(){this.toRemove=[]}addIntersection(t){return this.intersections.put(t)}getIntersection(t){return this.intersections.get(t)}addRandomCar(){let t,r;if(r=Traffic.sample(this.roads.all()),null!=r&&(t=Traffic.sample(r.lanes),null!=t))return this.addCar(new Car(t))}removeRandomCar(){let t;if(t=Traffic.sample(this.cars.all()),null!=t)return this.removeCar(t)}}