import{Traffic}from"../Traffic.js";import{LanePosition}from"./LanePosition.js";import{Curve}from"../geom/Curve.js";export class Trajectory{constructor(t,e,n){this.car=t,null==n&&(n=0),this.current=new LanePosition(this.car,e,n),this.current.acquire(),this.next=new LanePosition(this.car),this.temp=new LanePosition(this.car),this.isChangingLanes=!1}get lane(){return this.temp.lane||this.current.lane}get absolutePosition(){return null!=this.temp.lane?this.temp.position:this.current.position}get relativePosition(){return this.absolutePosition/this.lane.length}get direction(){return this.lane.getDirection(this.relativePosition)}get coords(){return this.lane.getPoint(this.relativePosition)}get nextCarDistance(){let t,e;return t=this.current.nextCarDistance,e=this.next.nextCarDistance,t.distance<e.distance?t:e}get distanceToStopLine(){return this.canEnterIntersection()?1/0:this.getDistanceToIntersection()}get nextIntersection(){return this.current.lane.road.target}get previousIntersection(){return this.current.lane.road.source}isValidTurn(){let t,e,n;if(t=this.car.nextLane,e=this.current.lane,!t)throw Error("no road to enter");if(n=e.getTurnDirection(t),3===n)throw Error("no U-turns are allowed");if(0===n&&!e.isLeftmost)throw Error("no left turns from this lane");if(2===n&&!e.isRightmost)throw Error("no right turns from this lane");return!0}canEnterIntersection(){let t,e,n,i,r;return e=this.car.nextLane,i=this.current.lane,!e||(t=this.nextIntersection,r=i.getTurnDirection(e),n=i.road.targetSideId,t.controlSignals.state[n][r])}getDistanceToIntersection(){let t;return t=this.current.lane.length-.5*this.car.length-this.current.position,this.isChangingLanes?1/0:Traffic.max(t,0)}timeToMakeTurn(t=0){return this.getDistanceToIntersection()<=t}moveForward(t){let e,n,i,r;if(t=Traffic.max(t,0),this.current.position+=t,this.next.position+=t,this.temp.position+=t,this.timeToMakeTurn()&&this.canEnterIntersection()&&this.isValidTurn()&&this._startChangingLanes(this.car.popNextLane(),0),n=this.temp.position/(null!=(i=this.temp.lane)?i.length:void 0),e=2*this.car.length,this.isChangingLanes&&this.temp.position>e&&!this.current.free&&this.current.release(),this.isChangingLanes&&this.next.free&&this.temp.position+e>(null!=(r=this.temp.lane)?r.length:void 0)&&this.next.acquire(),this.isChangingLanes&&n>=1&&this._finishChangingLanes(),this.current.lane&&!this.isChangingLanes&&!this.car.nextLane)return this.car.pickNextLane()}changeLane(t){let e;if(this.isChangingLanes)throw Error("already changing lane");if(null==t)throw Error("no next lane");if(t===this.lane)throw Error("next lane == current lane");if(this.lane.road!==t.road)throw Error("not neighbouring lanes");return e=this.current.position+3*this.car.length,e<this.lane.length||(e=this.current.position+2*this.car.length),e<this.lane.length||(e=this.current.position+1*this.car.length),e<this.lane.length||(e=this.current.position),this._startChangingLanes(t,e)}_getIntersectionLaneChangeCurve(){}_getAdjacentLaneChangeCurve(){let t,e,n,i,r,s,a;return s=this.current.lane.getPoint(this.current.relativePosition),a=this.next.lane.getPoint(this.next.relativePosition),r=a.subtract(s).length,n=this.current.lane.middleLine.vector.normalized.mult(.3*r),t=s.add(n),i=this.next.lane.middleLine.vector.normalized.mult(.3*r),e=a.subtract(i),new Curve(s,a,t,e)}_getCurve(){return this._getAdjacentLaneChangeCurve()}_startChangingLanes(t,e){if(this.isChangingLanes)throw Error("already changing lane");if(null==t)throw Error("no next lane");return this.isChangingLanes=!0,this.next.lane=t,this.next.position=e,this.temp.lane=this._getCurve(),this.temp.position=0,this.next.position-=this.temp.lane.length}_finishChangingLanes(){if(!this.isChangingLanes)throw Error("no lane changing is going on");return this.isChangingLanes=!1,this.current.lane=this.next.lane,this.current.position=this.next.position||0,this.current.acquire(),this.next.lane=null,this.next.position=NaN,this.temp.lane=null,this.temp.position=NaN,this.current.lane}release(){let t,e,n;return null!=(t=this.current)&&t.release(),null!=(e=this.next)&&e.release(),null!=(n=this.temp)?n.release():void 0}}