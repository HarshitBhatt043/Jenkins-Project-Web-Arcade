import{Traffic}from"../Traffic.js";import{Segment}from"../geom/Segment.js";export class Lane{constructor(t,e,i){this.sourceSegment=t,this.targetSegment=e,this.road=i,this.leftAdjacent=null,this.rightAdjacent=null,this.leftmostAdjacent=null,this.rightmostAdjacent=null,this.carsPositions={},this.update()}get sourceSideId(){return this.road.sourceSideId}get targetSideId(){return this.road.targetSideId}get isRightmost(){return this===this.rightmostAdjacent}get isLeftmost(){return this===this.leftmostAdjacent}get leftBorder(){return new Segment(this.sourceSegment.source,this.targetSegment.target)}get rightBorder(){return new Segment(this.sourceSegment.target,this.targetSegment.source)}toJSON(t){var e=Traffic.extend({},this);return delete e.carsPositions,e}update(){this.middleLine=new Segment(this.sourceSegment.center,this.targetSegment.center),this.length=this.middleLine.length,this.direction=this.middleLine.direction}getTurnDirection(t){return this.road.getTurnDirection(t.road)}getDirection(){return this.direction}getPoint(t){return this.middleLine.getPoint(t)}addCarPosition(t){if(t.id in this.carsPositions)throw Error("car is already here");this.carsPositions[t.id]=t}removeCar(t){if(!(t.id in this.carsPositions))throw Error("removing unknown car");delete this.carsPositions[t.id]}getNext(t){let e,i,r,s,n;if(t.lane!==this)throw Error("car is on other lane");for(r in s=null,e=1/0,this.carsPositions)n=this.carsPositions[r],i=n.position-t.position,!n.free&&0<i&&i<e&&(e=i,s=n);return s}}