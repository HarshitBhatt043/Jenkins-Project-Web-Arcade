import{Triangle,Vector3}from"../../../build/three.module.js";const _face=new Triangle,_color=new Vector3;class MeshSurfaceSampler{constructor(t){let e=t.geometry;if(!e.isBufferGeometry||3!==e.attributes.position.itemSize)throw new Error("THREE.MeshSurfaceSampler: Requires BufferGeometry triangle mesh.");e.index&&(e=e.toNonIndexed()),this.geometry=e,this.randomFunction=Math.random,this.positionAttribute=this.geometry.getAttribute("position"),this.colorAttribute=this.geometry.getAttribute("color"),this.weightAttribute=null,this.distribution=null}setWeightAttribute(t){return this.weightAttribute=t?this.geometry.getAttribute(t):null,this}build(){const t=this.positionAttribute,e=this.weightAttribute,r=new Float32Array(t.count/3);for(let i=0;i<t.count;i+=3){let o=1;e&&(o=e.getX(i)+e.getX(i+1)+e.getX(i+2)),_face.a.fromBufferAttribute(t,i),_face.b.fromBufferAttribute(t,i+1),_face.c.fromBufferAttribute(t,i+2),o*=_face.getArea(),r[i/3]=o}this.distribution=new Float32Array(t.count/3);let i=0;for(let t=0;t<r.length;t++)i+=r[t],this.distribution[t]=i;return this}setRandomGenerator(t){return this.randomFunction=t,this}sample(t,e,r){const i=this.distribution[this.distribution.length-1],o=this.binarySearch(this.randomFunction()*i);return this.sampleFace(o,t,e,r)}binarySearch(t){const e=this.distribution;let r=0,i=e.length-1,o=-1;for(;r<=i;){const a=Math.ceil((r+i)/2);if(0===a||e[a-1]<=t&&e[a]>t){o=a;break}t<e[a]?i=a-1:r=a+1}return o}sampleFace(t,e,r,i){let o=this.randomFunction(),a=this.randomFunction();return o+a>1&&(o=1-o,a=1-a),_face.a.fromBufferAttribute(this.positionAttribute,3*t),_face.b.fromBufferAttribute(this.positionAttribute,3*t+1),_face.c.fromBufferAttribute(this.positionAttribute,3*t+2),e.set(0,0,0).addScaledVector(_face.a,o).addScaledVector(_face.b,a).addScaledVector(_face.c,1-(o+a)),void 0!==r&&_face.getNormal(r),void 0!==i&&void 0!==this.colorAttribute&&(_face.a.fromBufferAttribute(this.colorAttribute,3*t),_face.b.fromBufferAttribute(this.colorAttribute,3*t+1),_face.c.fromBufferAttribute(this.colorAttribute,3*t+2),_color.set(0,0,0).addScaledVector(_face.a,o).addScaledVector(_face.b,a).addScaledVector(_face.c,1-(o+a)),i.r=_color.x,i.g=_color.y,i.b=_color.z),this}}export{MeshSurfaceSampler};