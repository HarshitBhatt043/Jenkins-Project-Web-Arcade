import{Micro}from"../Micro.js";import{Tiles,Tile}from"../Tile.js";import{Direction}from"../math/Direction.js";export class GameMap{constructor(t=128,e=128,i){this.isIsland=!1,this.pp=[],this.width=t,this.height=e,this.fsize=this.width*this.height,this.defaultValue=(new Tiles).getValue(),this.data=[],this.tilesData=new Micro.M_ARRAY_TYPE(this.fsize),this.powerData=new Micro.M_ARRAY_TYPE(this.fsize);let s=this.fsize;for(;s--;)this.data[s]=new Tiles(this.defaultValue),this.tilesData[s]=this.defaultValue;this.cityCentreX=Math.floor(.5*this.width),this.cityCentreY=Math.floor(.5*this.height),this.pollutionMaxX=this.cityCentreX,this.pollutionMaxY=this.cityCentreY,this.powerChange=!1,this.layer=[],this.resetLayer(),this.makePP()}upLayer(t,e,i,s){e>=Tile.TINYEXP&&e<=Tile.TINYEXPLAST&&(e-=825),this.tilesData[t]=e,this.layer[this.findLayer(i,s)]=1}resetLayer(){let t=64;for(;t--;)this.layer[t]=0}findLayer(t,e){return Math.floor(t/16)+8*Math.floor(e/16)}goodValue(t){return 0===t||t>1&&t<240}makePP(){let t,e=this.width,i=0,s=[];for(;e--;)for(t=this.height;t--;)s[i]=[e,t],i++;this.pp=s}powered(t){let e=t.id||this.getId(t.x,t.y);this.powerData[e]=t.v,this.powerChange=!0}save(t){let e,i=0;for(e=Micro.GameMapProps.length;i<e;)t[Micro.GameMapProps[i]]=this[Micro.GameMapProps[i]],i++;for(t.map=[],i=0,e=this.fsize;i<e;)t.map[i]=this.data[i].getRawValue(),i++;for(t.tileValue=[],i=0,e=this.fsize;i<e;)t.tileValue[i]=this.tilesData[i],i++}load(t){let e,i,s,a=0,h=t.map,l=t.tileValue;for(s=Micro.GameMapProps.length;a<s;)this[Micro.GameMapProps[a]]=t[Micro.GameMapProps[a]],a++;let r=void 0!==h[0].value;for(a=0,s=this.fsize;a<s;)e=a%this.width,i=Math.floor(a/this.width),r?this.setTileValue(e,i,h[a].value):this.setTileValue(e,i,h[a]),a++;for(a=0,s=this.fsize;a<s;)this.tilesData[a]=l[a],a++}testBounds(t,e){return t>=0&&e>=0&&t<this.width&&e<this.height}getId(t,e){return t+e*this.width}getTile(t,e,i){"object"==typeof t&&(e=t.y,t=t.x);let s=this.width,a=this.height;if(t<0||e<0||t>=s||e>=a)return new Tiles(Tile.TILE_INVALID);let h=this.getId(t,e),l=this.data[h];return i?(i.set(l),l):l}getTileValue(t,e){let i=new Error("Invalid parameter");if(arguments.length<1)throw i;if("object"==typeof t&&(e=t.y,t=t.x),!this.testBounds(t,e))throw i;let s=this.getId(t,e);return s in this.data||(this.data[s]=new Tiles(this.defaultValue)),this.data[s].getValue()}getTileFlags(t,e){let i=new Error("Invalid parameter");if(arguments.length<1)throw i;if("object"==typeof t&&(e=t.y,t=t.x),!this.testBounds(t,e))throw i;let s=this.getId(t,e);return s in this.data||(this.data[s]=new Tiles(this.defaultValue)),this.data[s].getFlags()}getTiles(t,e,i,s){let a=new Error("Invalid parameter");if(arguments.length<3)throw a;if(3===arguments.length&&(s=i,i=e,e=t.y,t=t.x),!this.testBounds(t,e))throw a;let h=[];for(let a=e,l=e+s;a<l;a++){h[a-e]=[];for(let s=t,l=t+i;s<l;s++){let t=this.getId(s,a);h[a-e].push(this.data[t])}}return h}getTileValues(t,e,i,s,a){a=a||[];let h=new Error("Invalid parameter");if(arguments.length<3)throw h;3===arguments.length&&(s=i,i=e,e=t.y,t=t.x);let l=this.width,r=this.height;for(let h=e,o=e+s;h<o;h++)for(let s=t,o=t+i;s<o;s++){if(h<0||s<0||h>=r||s>=l){a[(h-e)*i+(s-t)]=Tile.TILE_INVALID;continue}let o=s+h*l;a[(h-e)*i+(s-t)]=this.data[o].getRawValue()}return a}getTileFromMapOrDefault(t,e,i){switch(e){case Direction.NORTH:return t.y>0?this.getTileValue(t.x,t.y-1):i;case Direction.EAST:return t.x<this.width-1?this.getTileValue(t.x+1,t.y):i;case Direction.SOUTH:return t.y<this.height-1?this.getTileValue(t.x,t.y+1):i;case Direction.WEST:return t.x>0?this.getTileValue(t.x-1,t.y):i;default:return i}}testOld(t,e){return this.data[t].getValue()!==e}setTile(t,e,i,s){3===arguments.length&&(s=i,i=e,e=t.y,t=t.x);let a=this.getId(t,e),h=this.testOld(a,i);this.data[a].set(i,s),h&&this.upLayer(a,i,t,e)}setTo(t,e,i){void 0===i&&(i=e,e=t.y,t=t.x);let s=this.getId(t,e),a=i.getValue(),h=this.testOld(s,a);this.data[s]=i,h&&this.upLayer(s,a,t,e)}setTileValue(t,e,i){2===arguments.length&&(i=e,e=t.y,t=t.x);let s=this.getId(t,e),a=this.testOld(s,i);this.data[s].setValue(i),a&&this.upLayer(s,i,t,e)}setPaintValue(t,e,i){2===arguments.length&&(i=e,e=t.y,t=t.x);let s=this.getId(t,e);this.upLayer(s,i,t,e)}setTileFlags(t,e,i){let s=new Error("Invalid flag parameter");if(arguments.length<2)throw s;if(2===arguments.length&&(i=e,e=t.y,t=t.x),!this.testBounds(t,e))throw s;let a=this.getId(t,e);this.data[a].setFlags(i)}addTileFlags(t,e,i){let s=new Error("Invalid flag parameter");if(arguments.length<2)throw s;if(2===arguments.length&&(i=e,e=t.y,t=t.x),!this.testBounds(t,e))throw s;let a=this.getId(t,e);this.data[a].addFlags(i)}removeTileFlags(t,e,i){if(arguments.length<2)throw new Error("GameMap removeTileFlags called with too few arguments");if(2===arguments.length&&(i=e,e=t.y,t=t.x),!this.testBounds(t,e))throw new Error("GameMap removeTileFlags called with invalid bounds"+t+", "+e);let s=this.getId(t,e);this.data[s].removeFlags(i)}putZone(t,e,i,s){if(!this.testBounds(t,e)||!this.testBounds(t-1+s,e-1+s))throw new Error("GameMap putZone called with invalid bounds");let a,h,l=i-1-s,r=t-1,o=e-1;for(h=o;h<o+s;h++)for(a=r;a<r+s;a++)a===t&&h===e?this.setTo(a,h,new Tiles(l,Tile.BNCNBIT|Tile.ZONEBIT)):this.setTo(a,h,new Tiles(l,Tile.BNCNBIT)),l+=1}}